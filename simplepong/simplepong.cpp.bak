#include <iostream>
using namespace std;

enum eDir{ STOP = 0, WEST = 1, NORTHWEST = 2, SOUTHWEST= 3, EAST = 4, NORTHEAST = 5, SOUTHEAST = 6};
/* "An enumeration is a distinct type whose value is restricted to a range of values,
   which may include several explicitly named constants ('enumerators'). The values of
   the constants are values of an integral type known as the underlying type of the
   enumeratlion." (https://en.cppreference.com/w/cpp/language/enum)
	-- An "integral type" represents a whole number. It's an integer.
 	-- "enumeration" = "the action of mentioning a number of things one by one."
 		-Oxford Languages 							*/

class cBall {
	private:
		int x, y;
		int originalX, originalY;
		eDir direction;
	public:
		cBall(int posX, int posY){
			originalX = posX;
			originalY = posY;
			x = posX; 
			y = posY;
			direction = STOP;
		}
		void Reset(){
			x = originalX; 
			y = originalY;
			direction = STOP;
		}
		void changeDirection(eDir d){
			direction = d;
		}
		void randomDirection(){
			direction = (eDir)((rand() % 6) + 1);
		}
		inline int getX(){ return x; }
		inline int getY(){ return y; }
		inline eDir getDirection(){ return direction; }
		void Move(){
			switch(direction){
				case STOP:
					break;
				case WEST:
					x--;
					break;
				case NORTHWEST:
					x--;
					y++;
					break;
				case SOUTHWEST:
					x--;
				       	y--;	
					break;
				case EAST:
					x++;
					break;
				case NORTHEAST:
					x++;
					y++;
					break;
				case SOUTHEAST:
					x++;
					y--;
					break;
			}
		}
	friend ostream& operator<<(ostream & o, cBall c){
		o << "Ball ["<< c.x << "," << c.y << "][" << c.direction << "]";
		return o;
	}	
};

int main() {
	srand(time(NULL));
	cBall c(0,0);
	cout << "LEGEND: STOP = 0, W = 1, NW = 2," << endl << "SW = 3, E = 4, NE = 5, SE = 6" << endl;
	cout << c << endl;
	
	c.randomDirection();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl << endl;

	c.randomDirection();
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl << endl;;


	c.randomDirection();
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl << endl;

	c.randomDirection();
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	c.Move();
	cout << c << endl;
	return 0;
}
